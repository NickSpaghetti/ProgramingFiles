{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\ql\qnatural

\f0\fs24 \cf0 // Member-function definitions for class Date.\
#include <iostream>\
#include <iomanip>\
#include <stdexcept>\
#include "Date.h" // include Date class definition\
\
using namespace std;\
\
// constructor that takes date in mm/dd/yy format\
Date::Date( int mm, int dd, int yy )\
\{\
   setYear( yy ); // validate and set the year\
   setMonth( mm ); // validate and set the month\
   setDay( dd ); // validate and set the day\
\}\
\
\
// validate and store the day\
void Date::setDay( int d )\
\{\
   day = checkDay( d ); // validate the day\
\} \
\
// validate and store the month\
void Date::setMonth( int m )\
\{\
   if ( m > 0 && m <= 12 ) // validate the month\
      month = m;\
   else \
      throw invalid_argument( "Invalid month" );\
\}\
\
// validate and store the year\
void Date::setYear( int y )\
\{\
   if (y <= 99 && y >= 0)\
      year = y;\
   else \
      throw invalid_argument( "Invalid year" );\
\}\
// print Date object in form: month/day/year\
void Date::print() const\
\{\
   cout << month << '/' << day << '/' << year << endl; \
\}\
\
\
// print Date object in form: mm/dd/yy\
void Date::printMMDDYY() const\
\{\
   cout << setw( 2 ) << setfill( '0' ) << month << '/' \
      << setw( 2 ) << setfill( '0' ) << day << '/' \
      << setw( 2 ) << setfill( '0' ) << year << endl;\
\} \
\
\
// output Date object to show when its destructor is called\
Date::~Date()\
\{ \
   cout << "Date object destructor for date ";\
   print();\
   cout << endl;\
\} \
\
// utility function to confirm proper day value based on \
// month and year; handles leap years, too\
int Date::checkDay( int testDay ) const\
\{\
   // determine whether testDay is valid for specified month\
   if ( testDay > 0 && testDay <= daysInMonth( month ) )\
      return testDay;\
\
   // February 29 check for leap year \
   if ( month == 2 && testDay == 29 && isLeapYear() )\
      return testDay;\
\
   throw invalid_argument( "Invalid day for current month and year" );\
\} \
\
// return the number of days in a month\
int Date::daysInMonth( int m ) const\
\{\
   if ( isLeapYear() && m == 2 )\
      return 29;\
   \
   static const int daysPerMonth[ 13 ] = \
      \{ 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 \};\
\
   return daysPerMonth[ m ];\
\} \
\
// test for a leap year\
bool Date::isLeapYear() const\
\{\
   if ( year % 400 == 0 || ( year % 4 == 0 && year % 100 != 0 ) )\
      return true;\
   else\
      return false;\
\} \
}